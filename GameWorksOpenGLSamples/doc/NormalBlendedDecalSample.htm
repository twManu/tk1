<!doctype html>
<html class="csstransforms csstransforms3d csstransitions" lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta charset="utf-8" />
	
	<title>Normal Blended Decal Sample</title>
	<meta name="description" content="Normal Blended Decal Sample" />
	
	<!-- CSS files -->
    <link href="./css/application.css" rel="stylesheet" type="text/css" />
    <link href="./css/styleguide.css" rel="stylesheet" type="text/css" />
	<!--<link rel="stylesheet" type="text/css" href="sdk_samples.css" />-->
	<!-- scripts to include -->
    <script src="./js/jquery.js"></script>
    <script src="./js/owl.carousel.js"></script>
    <script src="./js/jquery.fitvids.js"></script>
    <script src="./js/jquery.colorbox.js"></script>
    <script src="./js/jquery.isotope.js"></script>
    <script src="./js/jquery.sidr.js"></script>
    <script src="./js/bootstrap.js"></script>
    <script src="./js/application.js"></script>
    <script src="./js/prettify.js"></script>
</head>

<body style="">

<!--Navbar-->
<nav class="navbar navbar-inverse navbar-static-top" role="navigation">
  <div class="container">
	<div class="navbar-header" style="">
	  <!--<button class="navbar-toggle" type="button"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button>-->
	  <div class="logo-header">
		<a class="navbar-brand logo" href="http://developer.nvidia.com/gameworks"><img alt="NVidia Gameworks" height="21" src="./images/developerzone_gameworks_logo.png" width="245"></a>
	  </div>
	</div>
  </div>
</nav>

<!-- main body block -->
<div id="content" class="container">

<div class="row" id="subprojcontent">
<div class="col-md-8">
	<div class="page-header">
		<h1>Normal Blended Decal Sample</h1>
	</div>

	<div class="row">
		
			<div class="subprojmetadata">
			<b class="small">Category:</b>
			
				<span class="btn btn-primary btn-xs subprojmetacat">&nbsp;Performance&nbsp;</span>
			
				<span class="btn btn-primary btn-xs subprojmetacat">&nbsp;Visuals&nbsp;</span>
			
			</div>
		
		<div class="subprojmetadata">
			<b class="small">Min PC GPU:</b>
			<span class="subprojmetagpu">Fermi-based (GTX 4xx)</span>
		</div>
		
		<div class="subprojmetadata">
			<b class="small">Min Tegra Device:</b>
			<span class="subprojmetagpu">N/A</span>
		</div>
		
	</div>
	
	<div class="row">
		<h3>Description</h3>
		<p>The Normal Blended Decal Sample demonstrates how to use the OpenGL PSI (Pixel Shader Interlock) feature to blend normals when drawing screen-space decals. This sample compares the performance of PSI with glMemoryBarrier.</p>
			
		<a data-colorbox="true" href="images/normalblendeddecal-screenshot.jpg"><img class="subprojscreen" src="images/normalblendeddecal-screenshot.jpg" width="400" alt="Screenshot" /></a>
		
	</div>
	
	
	<div class="row">
		<h3>APIs Used</h3>
		<ul>
		
		  <li class="odd">GL_NV_fragment_shader_interlock</li>
		
		  <li class="even">GL4.3</li>
		
		</ul>
	</div>
	

	
	
	
	
	<div class="row">
		<h3>Shared User Interface</h3>
		<p>The OpenGL samples all share a common app framework and certain user interface elements, centered around the "Tweakbar" panel on the left side of the screen which lets you interactively control certain variables in each sample.</p>
		<p>To show and hide the Tweakbar, simply click or touch the triangular button positioned in the top-left of the view.</p>
		<div class="subprojmetadata">
			<p>Other controls are listed below.</p>
			
		<table class="table table-striped small subprojcontrolstable" id="sharedcontrolstable">
		
		<tr>
			<th class="subprojcontrolsdevice">Device</th>
			<th class="subprojcontrolsinput">Input</th>
			<th class="subprojcontrolsresult">Result</th>
		</tr>
	
		
		
			
			<tr class="odd">
				
				<td class="subprojcontrolsdevicekind">touch</td>
				
				<td>1-Finger Drag</td> <td>Orbit-rotate the camera</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>2-Finger Drag</td> <td>Move up/down/left/right</td>
			</tr>
			
			<tr class="odd">
				
				<td> </td>
				
				<td>2-Finger Pinch</td> <td>Scale the view</td>
			</tr>
			
		
			
			<tr class="even">
				
				<td class="subprojcontrolsdevicekind">mouse</td>
				
				<td>Left-Button Drag</td> <td>Orbit-rotate the camera</td>
			</tr>
			
			<tr class="odd">
				
				<td> </td>
				
				<td>Right-Button Drag</td> <td>Move up/down/left/right</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>Middle-Click Drag</td> <td>Scale the view (up:out, down:in)</td>
			</tr>
			
		
			
			<tr class="odd">
				
				<td class="subprojcontrolsdevicekind">keyboard</td>
				
				<td>Escape</td> <td>Quit the application</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>Tab</td> <td>Toggle TweakBar visibility</td>
			</tr>
			
		
			
			<tr class="odd">
				
				<td class="subprojcontrolsdevicekind">gamepad</td>
				
				<td>Start</td> <td>Toggle TweakBar visibility</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>Right ThumbStick</td> <td>Orbit-rotate the camera</td>
			</tr>
			
			<tr class="odd">
				
				<td> </td>
				
				<td>Left ThumbStick</td> <td>Move forward/backward, Slide left/right</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>Left/Right Triggers</td> <td>Move up/down</td>
			</tr>
			
			<tr class="odd">
				
				<td> </td>
				
				<td>A</td> <td>Show TweakBar, Toggle Focused Item</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>B</td> <td>Close Focused UI, Hide TweakBar</td>
			</tr>
			
			<tr class="odd">
				
				<td> </td>
				
				<td>DPAD Up/Down</td> <td>Move Focus to Prev/Next Item</td>
			</tr>
			
			<tr class="even">
				
				<td> </td>
				
				<td>DPAD Left/Right</td> <td>Decrease/Increase Focused Item</td>
			</tr>
			
		
		</table>
	
		</div>
	</div>
	
		
	

		
	<div class="row" id="subprojfulldoc">
		<h3>Technical Details</h3>
		<div id="detaileddoc">

<h4>Overview</h4>
<p>
The Normal Blended Decal Sample demonstrates how to use the OpenGL PSI(Pixel Shader Interlock) feature to blend normals when drawing screen-space decals. This sample compares the performance of PSI with glMemoryBarrier.
</p>

<h5>Decal Rendering</h5>
<p>
When using deferred rendering, applying decals is quite simple. All that is required is to draw a cube that represents the decal volume onto the gbuffer. The decal application is independent of the complexity of the scene geometry.
</p>

<p>
When we render decal geometries into gbuffer, the source normal from the decal's normal texture needs to be smoothly blended with the target normal already in the gbuffer. This normal blending requires both reading current normal values from the gbuffer and writing new blended normal values back to the same gbuffer in a single pass. When data packing/unpacking routines and complex normal blending equations are needed, it is difficult to do this in the blending stage of the OpenGL pipeline.
</p>

<h5>Synchronization</h5>
<p>
We can do the blending in the shader, but GPU doesn't guarantee the order of the fragment's shader invocations.  Thus, it may result in flickering or undefined artifacts when multiple decals are overlapped. This is due to the fact that shader invocations can overwrite the memory based on older value right after other invocation's write.
</p>

<p>
To avoid overwriting the same memory with multiple, interleaved shader invocations, we can call <code>glMemoryBarrier()</code> after each decal rendering pass to wait until all previous memory accesses are completed. To lower CPU overhead and improve CPU-GPU parallelism, we can use shader-level critical sections via a pair of <code>beginInvocationInterlockNV()</code> and <code>endInvocationInterlockNV()</code> calls surrounding the normal blending operations.  The <code>GL_NV_fragment_shader_interlock</code> extension defines these GLSL functions. All operations within the scope defined by these two functions that touch the same pixel are guaranteed to execute sequentially.
</p>

<h4>Running the Sample</h4>
<p>
  The <b>Lock Option</b> radio box selects which locking method is used.
</p>
<ul>
  <li><b>No Lock</b> ignores locking issues and is for displaying the artifacts like flickering.</li>
  <li><b>MemoryBarrier</b> uses <code>glMemoryBarrier()</code> calls to implement locking.</li>
  <li><b>PixelShaderInterlock</b> uses the <code>GL_NV_fragment_shader_interlock</code> extension.</li>
</ul>
<p>
  The <b>MemoryBarrier</b> and <b>PixelShaderInterlock</b> modes generate the same results, but performance can be different.
</p>
  <p>
The <b>View Option</b> radio box shows different debugging views. 
</p>
  <ul>
    <li>The <b>Normals</b> view mode shows the resulting normal vectors in the gbuffer.</li>
    <li>The <b>Decal Boxes</b> view mode shows the Screen Space Decal cube volumes as red boxes.</li>
  </ul>
<p>
The <b>Decal Distance</b> adjustment changes the offset between decal volumes. You can enable <b>Decal Boxes</b> via the View Option radio box to see where the decal volumes are located.
</p>
<p>
The <b>Decal Blend Weight</b> adjustment changes the blending weight between the source normal and the target normal, increasing or decreasing the appearance of the decal.
</p>
<p>
The <b>Models</b> radio box selects which geometric model is used for the scene geometry. <b>Bunny</b> is the well-known bunny model;  <b>Box</b> is a simple cube model.
</p>
</div>
	</div>
	

	
	<div class="row" id="subprojseealso">
		<h3>See Also</h3>
		<ul>
		
		  <li class="odd">
		  <!-- tbd file static refs will need to turn into an nvidia.com relative URL... -->
		  <span class="subprojseeone">
		  <a href="http://www.slideshare.net/blindrenderer/screen-space-decals-in-warhammer-40000-space-marine-14699854">
		  Screen Space Decals in Warhammer 40,000: Space Marine, Pope Kim, Siggraph, 2012
		  </a>
		  </span></li>
		
		</ul>
	</div>
		
	
</div>
</div>

</div> <!--content-->
<!-- footer block-->
<div id="footer" class="container">
	<div class="seperator"></div>
	<div class="seperator"></div>
	<footer>
		<div class="row">
			<div class="text-center">&copy;2014 NVIDIA Corporation.</div>
			<div class="seperator"></div>
		</div>
	</footer>
</div> <!--footer-->

</body>
</html>