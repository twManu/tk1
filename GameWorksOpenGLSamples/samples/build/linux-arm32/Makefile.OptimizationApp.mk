# Makefile generated by XPJ for linux-arm32
-include Makefile.custom
ProjectName = OptimizationApp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/IceRevisitedRadix.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/OptimizationApp.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/ParticleRenderer.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/ParticleSystem.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/SceneRenderer.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/Terrain.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/Upsampler.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/scene.cpp
OptimizationApp_cppfiles   += ./../../es2-aurora/OptimizationApp/utils.cpp

OptimizationApp_debug_hpaths    := 
OptimizationApp_debug_hpaths    += ./../../es2-aurora/OptimizationApp
OptimizationApp_debug_hpaths    += ./../../../extensions/include
OptimizationApp_debug_hpaths    += ./../../../extensions/externals/include
OptimizationApp_debug_hpaths    += ./../../../extensions/externals/include/GLFW
OptimizationApp_debug_lpaths    := 
OptimizationApp_debug_lpaths    += ./../../../extensions/externals/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/externals/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_debug_defines   := $(OptimizationApp_custom_defines)
OptimizationApp_debug_defines   += LINUX=1
OptimizationApp_debug_defines   += GLEW_NO_GLU=1
OptimizationApp_debug_defines   += _DEBUG
OptimizationApp_debug_libraries := 
OptimizationApp_debug_libraries += NvAppBaseD
OptimizationApp_debug_libraries += NvUID
OptimizationApp_debug_libraries += NvAssetLoaderD
OptimizationApp_debug_libraries += NvModelD
OptimizationApp_debug_libraries += NvGLUtilsD
OptimizationApp_debug_libraries += NvGamepadD
OptimizationApp_debug_libraries += HalfD
OptimizationApp_debug_libraries += GLEW
OptimizationApp_debug_libraries += glfw3
OptimizationApp_debug_libraries += X11
OptimizationApp_debug_libraries += Xrandr
OptimizationApp_debug_libraries += Xi
OptimizationApp_debug_libraries += rt
OptimizationApp_debug_libraries += m
OptimizationApp_debug_libraries += GL
OptimizationApp_debug_libraries += dl
OptimizationApp_debug_libraries += Xxf86vm
OptimizationApp_debug_libraries += pthread
OptimizationApp_debug_libraries += :libHalfD.a
OptimizationApp_debug_libraries += :libNvAppBaseD.a
OptimizationApp_debug_libraries += :libNvAssetLoaderD.a
OptimizationApp_debug_libraries += :libNvGamepadD.a
OptimizationApp_debug_libraries += :libNvGLUtilsD.a
OptimizationApp_debug_libraries += :libNvModelD.a
OptimizationApp_debug_libraries += :libNvUID.a
OptimizationApp_debug_cflags    := $(OptimizationApp_custom_cflags)
OptimizationApp_debug_cflags    += $(addprefix -D, $(OptimizationApp_debug_defines))
OptimizationApp_debug_cflags    += $(addprefix -I, $(OptimizationApp_debug_hpaths))
OptimizationApp_debug_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function
OptimizationApp_debug_cflags  += -Wno-reorder
OptimizationApp_debug_cflags  += -funwind-tables -O0 -g -ggdb -fno-omit-frame-pointer
OptimizationApp_debug_lflags    := $(OptimizationApp_custom_lflags)
OptimizationApp_debug_lflags    += $(addprefix -L, $(OptimizationApp_debug_lpaths))
OptimizationApp_debug_lflags    += -Wl,--start-group $(addprefix -l, $(OptimizationApp_debug_libraries)) -Wl,--end-group
OptimizationApp_debug_lflags  += -Wl,--unresolved-symbols=ignore-in-shared-libs
OptimizationApp_debug_objsdir  := $(OBJS_DIR)/OptimizationApp_debug
OptimizationApp_debug_obj      := 
OptimizationApp_debug_cpp_o    = $(addprefix $(OptimizationApp_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(OptimizationApp_cppfiles)))))
OptimizationApp_debug_obj      += $(OptimizationApp_debug_cpp_o) 
OptimizationApp_debug_bin      := ./../../bin/linux-arm32/OptimizationAppD

clean_OptimizationApp_debug: 
	@$(ECHO) clean OptimizationApp debug
	@$(RMDIR) $(OptimizationApp_debug_objsdir)
	@$(RMDIR) $(OptimizationApp_debug_bin)

build_OptimizationApp_debug: postbuild_OptimizationApp_debug
postbuild_OptimizationApp_debug: mainbuild_OptimizationApp_debug
mainbuild_OptimizationApp_debug: prebuild_OptimizationApp_debug $(OptimizationApp_debug_bin)
prebuild_OptimizationApp_debug:

-include $(OptimizationApp_debug_cpp_o:%o=%d)

$(OptimizationApp_debug_bin): $(OptimizationApp_debug_obj) $(Half_debug_bin) $(NvAppBase_debug_bin) $(NvAssetLoader_debug_bin) $(NvGamepad_debug_bin) $(NvGLUtils_debug_bin) $(NvModel_debug_bin) $(NvUI_debug_bin) 
	@mkdir -p `dirname ./../../bin/linux-arm32/OptimizationAppD`
	$(CCLD) $^ $(OptimizationApp_debug_lflags) -o $(OptimizationApp_debug_bin) 
	@$(ECHO) building $@ complete!

$(OptimizationApp_debug_cpp_o): $(OptimizationApp_debug_objsdir)/%.o: 
	@$(ECHO) OptimizationApp: compiling debug $(filter %$*,$(OptimizationApp_cppfiles))...
	@mkdir -p $(dir $(@))
	$(CXX) $(OptimizationApp_debug_cflags) -MMD -MP -MF $(subst .cpp.o,.cpp.d,$@) -c $(filter %$*,$(OptimizationApp_cppfiles)) -o $@
OptimizationApp_release_hpaths    := 
OptimizationApp_release_hpaths    += ./../../es2-aurora/OptimizationApp
OptimizationApp_release_hpaths    += ./../../../extensions/include
OptimizationApp_release_hpaths    += ./../../../extensions/externals/include
OptimizationApp_release_hpaths    += ./../../../extensions/externals/include/GLFW
OptimizationApp_release_lpaths    := 
OptimizationApp_release_lpaths    += ./../../../extensions/externals/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/externals/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
OptimizationApp_release_defines   := $(OptimizationApp_custom_defines)
OptimizationApp_release_defines   += LINUX=1
OptimizationApp_release_defines   += GLEW_NO_GLU=1
OptimizationApp_release_defines   += NDEBUG
OptimizationApp_release_libraries := 
OptimizationApp_release_libraries += NvAppBase
OptimizationApp_release_libraries += NvUI
OptimizationApp_release_libraries += NvAssetLoader
OptimizationApp_release_libraries += NvModel
OptimizationApp_release_libraries += NvGLUtils
OptimizationApp_release_libraries += NvGamepad
OptimizationApp_release_libraries += Half
OptimizationApp_release_libraries += GLEW
OptimizationApp_release_libraries += glfw3
OptimizationApp_release_libraries += X11
OptimizationApp_release_libraries += Xrandr
OptimizationApp_release_libraries += Xi
OptimizationApp_release_libraries += rt
OptimizationApp_release_libraries += m
OptimizationApp_release_libraries += GL
OptimizationApp_release_libraries += dl
OptimizationApp_release_libraries += Xxf86vm
OptimizationApp_release_libraries += pthread
OptimizationApp_release_libraries += :libHalf.a
OptimizationApp_release_libraries += :libNvAppBase.a
OptimizationApp_release_libraries += :libNvAssetLoader.a
OptimizationApp_release_libraries += :libNvGamepad.a
OptimizationApp_release_libraries += :libNvGLUtils.a
OptimizationApp_release_libraries += :libNvModel.a
OptimizationApp_release_libraries += :libNvUI.a
OptimizationApp_release_cflags    := $(OptimizationApp_custom_cflags)
OptimizationApp_release_cflags    += $(addprefix -D, $(OptimizationApp_release_defines))
OptimizationApp_release_cflags    += $(addprefix -I, $(OptimizationApp_release_hpaths))
OptimizationApp_release_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function
OptimizationApp_release_cflags  += -Wno-reorder
OptimizationApp_release_cflags  += -funwind-tables -O2 -fno-omit-frame-pointer
OptimizationApp_release_lflags    := $(OptimizationApp_custom_lflags)
OptimizationApp_release_lflags    += $(addprefix -L, $(OptimizationApp_release_lpaths))
OptimizationApp_release_lflags    += -Wl,--start-group $(addprefix -l, $(OptimizationApp_release_libraries)) -Wl,--end-group
OptimizationApp_release_lflags  += -Wl,--unresolved-symbols=ignore-in-shared-libs
OptimizationApp_release_objsdir  := $(OBJS_DIR)/OptimizationApp_release
OptimizationApp_release_obj      := 
OptimizationApp_release_cpp_o    = $(addprefix $(OptimizationApp_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(OptimizationApp_cppfiles)))))
OptimizationApp_release_obj      += $(OptimizationApp_release_cpp_o) 
OptimizationApp_release_bin      := ./../../bin/linux-arm32/OptimizationApp

clean_OptimizationApp_release: 
	@$(ECHO) clean OptimizationApp release
	@$(RMDIR) $(OptimizationApp_release_objsdir)
	@$(RMDIR) $(OptimizationApp_release_bin)

build_OptimizationApp_release: postbuild_OptimizationApp_release
postbuild_OptimizationApp_release: mainbuild_OptimizationApp_release
mainbuild_OptimizationApp_release: prebuild_OptimizationApp_release $(OptimizationApp_release_bin)
prebuild_OptimizationApp_release:

-include $(OptimizationApp_release_cpp_o:%o=%d)

$(OptimizationApp_release_bin): $(OptimizationApp_release_obj) $(Half_release_bin) $(NvAppBase_release_bin) $(NvAssetLoader_release_bin) $(NvGamepad_release_bin) $(NvGLUtils_release_bin) $(NvModel_release_bin) $(NvUI_release_bin) 
	@mkdir -p `dirname ./../../bin/linux-arm32/OptimizationApp`
	$(CCLD) $^ $(OptimizationApp_release_lflags) -o $(OptimizationApp_release_bin) 
	@$(ECHO) building $@ complete!

$(OptimizationApp_release_cpp_o): $(OptimizationApp_release_objsdir)/%.o: 
	@$(ECHO) OptimizationApp: compiling release $(filter %$*,$(OptimizationApp_cppfiles))...
	@mkdir -p $(dir $(@))
	$(CXX) $(OptimizationApp_release_cflags) -MMD -MP -MF $(subst .cpp.o,.cpp.d,$@) -c $(filter %$*,$(OptimizationApp_cppfiles)) -o $@
