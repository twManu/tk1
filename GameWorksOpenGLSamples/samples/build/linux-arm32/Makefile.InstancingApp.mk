# Makefile generated by XPJ for linux-arm32
-include Makefile.custom
ProjectName = InstancingApp
InstancingApp_cppfiles   += ./../../es2-aurora/InstancingApp/InstancingApp.cpp

InstancingApp_debug_hpaths    := 
InstancingApp_debug_hpaths    += ./../../es2-aurora/InstancingApp
InstancingApp_debug_hpaths    += ./../../../extensions/include
InstancingApp_debug_hpaths    += ./../../../extensions/externals/include
InstancingApp_debug_hpaths    += ./../../../extensions/externals/include/GLFW
InstancingApp_debug_lpaths    := 
InstancingApp_debug_lpaths    += ./../../../extensions/externals/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/externals/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_debug_defines   := $(InstancingApp_custom_defines)
InstancingApp_debug_defines   += LINUX=1
InstancingApp_debug_defines   += GLEW_NO_GLU=1
InstancingApp_debug_defines   += _DEBUG
InstancingApp_debug_libraries := 
InstancingApp_debug_libraries += NvAppBaseD
InstancingApp_debug_libraries += NvUID
InstancingApp_debug_libraries += NvAssetLoaderD
InstancingApp_debug_libraries += NvModelD
InstancingApp_debug_libraries += NvGLUtilsD
InstancingApp_debug_libraries += NvGamepadD
InstancingApp_debug_libraries += HalfD
InstancingApp_debug_libraries += GLEW
InstancingApp_debug_libraries += glfw3
InstancingApp_debug_libraries += X11
InstancingApp_debug_libraries += Xrandr
InstancingApp_debug_libraries += Xi
InstancingApp_debug_libraries += rt
InstancingApp_debug_libraries += m
InstancingApp_debug_libraries += GL
InstancingApp_debug_libraries += dl
InstancingApp_debug_libraries += Xxf86vm
InstancingApp_debug_libraries += pthread
InstancingApp_debug_libraries += :libHalfD.a
InstancingApp_debug_libraries += :libNvAppBaseD.a
InstancingApp_debug_libraries += :libNvAssetLoaderD.a
InstancingApp_debug_libraries += :libNvGamepadD.a
InstancingApp_debug_libraries += :libNvGLUtilsD.a
InstancingApp_debug_libraries += :libNvModelD.a
InstancingApp_debug_libraries += :libNvUID.a
InstancingApp_debug_cflags    := $(InstancingApp_custom_cflags)
InstancingApp_debug_cflags    += $(addprefix -D, $(InstancingApp_debug_defines))
InstancingApp_debug_cflags    += $(addprefix -I, $(InstancingApp_debug_hpaths))
InstancingApp_debug_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function
InstancingApp_debug_cflags  += -Wno-reorder
InstancingApp_debug_cflags  += -funwind-tables -O0 -g -ggdb -fno-omit-frame-pointer
InstancingApp_debug_lflags    := $(InstancingApp_custom_lflags)
InstancingApp_debug_lflags    += $(addprefix -L, $(InstancingApp_debug_lpaths))
InstancingApp_debug_lflags    += -Wl,--start-group $(addprefix -l, $(InstancingApp_debug_libraries)) -Wl,--end-group
InstancingApp_debug_lflags  += -Wl,--unresolved-symbols=ignore-in-shared-libs
InstancingApp_debug_objsdir  := $(OBJS_DIR)/InstancingApp_debug
InstancingApp_debug_obj      := 
InstancingApp_debug_cpp_o    = $(addprefix $(InstancingApp_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(InstancingApp_cppfiles)))))
InstancingApp_debug_obj      += $(InstancingApp_debug_cpp_o) 
InstancingApp_debug_bin      := ./../../bin/linux-arm32/InstancingAppD

clean_InstancingApp_debug: 
	@$(ECHO) clean InstancingApp debug
	@$(RMDIR) $(InstancingApp_debug_objsdir)
	@$(RMDIR) $(InstancingApp_debug_bin)

build_InstancingApp_debug: postbuild_InstancingApp_debug
postbuild_InstancingApp_debug: mainbuild_InstancingApp_debug
mainbuild_InstancingApp_debug: prebuild_InstancingApp_debug $(InstancingApp_debug_bin)
prebuild_InstancingApp_debug:

-include $(InstancingApp_debug_cpp_o:%o=%d)

$(InstancingApp_debug_bin): $(InstancingApp_debug_obj) $(Half_debug_bin) $(NvAppBase_debug_bin) $(NvAssetLoader_debug_bin) $(NvGamepad_debug_bin) $(NvGLUtils_debug_bin) $(NvModel_debug_bin) $(NvUI_debug_bin) 
	@mkdir -p `dirname ./../../bin/linux-arm32/InstancingAppD`
	$(CCLD) $^ $(InstancingApp_debug_lflags) -o $(InstancingApp_debug_bin) 
	@$(ECHO) building $@ complete!

$(InstancingApp_debug_cpp_o): $(InstancingApp_debug_objsdir)/%.o: 
	@$(ECHO) InstancingApp: compiling debug $(filter %$*,$(InstancingApp_cppfiles))...
	@mkdir -p $(dir $(@))
	$(CXX) $(InstancingApp_debug_cflags) -MMD -MP -MF $(subst .cpp.o,.cpp.d,$@) -c $(filter %$*,$(InstancingApp_cppfiles)) -o $@
InstancingApp_release_hpaths    := 
InstancingApp_release_hpaths    += ./../../es2-aurora/InstancingApp
InstancingApp_release_hpaths    += ./../../../extensions/include
InstancingApp_release_hpaths    += ./../../../extensions/externals/include
InstancingApp_release_hpaths    += ./../../../extensions/externals/include/GLFW
InstancingApp_release_lpaths    := 
InstancingApp_release_lpaths    += ./../../../extensions/externals/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/externals/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_lpaths    += ./../../../extensions/lib/linux-arm32
InstancingApp_release_defines   := $(InstancingApp_custom_defines)
InstancingApp_release_defines   += LINUX=1
InstancingApp_release_defines   += GLEW_NO_GLU=1
InstancingApp_release_defines   += NDEBUG
InstancingApp_release_libraries := 
InstancingApp_release_libraries += NvAppBase
InstancingApp_release_libraries += NvUI
InstancingApp_release_libraries += NvAssetLoader
InstancingApp_release_libraries += NvModel
InstancingApp_release_libraries += NvGLUtils
InstancingApp_release_libraries += NvGamepad
InstancingApp_release_libraries += Half
InstancingApp_release_libraries += GLEW
InstancingApp_release_libraries += glfw3
InstancingApp_release_libraries += X11
InstancingApp_release_libraries += Xrandr
InstancingApp_release_libraries += Xi
InstancingApp_release_libraries += rt
InstancingApp_release_libraries += m
InstancingApp_release_libraries += GL
InstancingApp_release_libraries += dl
InstancingApp_release_libraries += Xxf86vm
InstancingApp_release_libraries += pthread
InstancingApp_release_libraries += :libHalf.a
InstancingApp_release_libraries += :libNvAppBase.a
InstancingApp_release_libraries += :libNvAssetLoader.a
InstancingApp_release_libraries += :libNvGamepad.a
InstancingApp_release_libraries += :libNvGLUtils.a
InstancingApp_release_libraries += :libNvModel.a
InstancingApp_release_libraries += :libNvUI.a
InstancingApp_release_cflags    := $(InstancingApp_custom_cflags)
InstancingApp_release_cflags    += $(addprefix -D, $(InstancingApp_release_defines))
InstancingApp_release_cflags    += $(addprefix -I, $(InstancingApp_release_hpaths))
InstancingApp_release_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function
InstancingApp_release_cflags  += -Wno-reorder
InstancingApp_release_cflags  += -funwind-tables -O2 -fno-omit-frame-pointer
InstancingApp_release_lflags    := $(InstancingApp_custom_lflags)
InstancingApp_release_lflags    += $(addprefix -L, $(InstancingApp_release_lpaths))
InstancingApp_release_lflags    += -Wl,--start-group $(addprefix -l, $(InstancingApp_release_libraries)) -Wl,--end-group
InstancingApp_release_lflags  += -Wl,--unresolved-symbols=ignore-in-shared-libs
InstancingApp_release_objsdir  := $(OBJS_DIR)/InstancingApp_release
InstancingApp_release_obj      := 
InstancingApp_release_cpp_o    = $(addprefix $(InstancingApp_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(InstancingApp_cppfiles)))))
InstancingApp_release_obj      += $(InstancingApp_release_cpp_o) 
InstancingApp_release_bin      := ./../../bin/linux-arm32/InstancingApp

clean_InstancingApp_release: 
	@$(ECHO) clean InstancingApp release
	@$(RMDIR) $(InstancingApp_release_objsdir)
	@$(RMDIR) $(InstancingApp_release_bin)

build_InstancingApp_release: postbuild_InstancingApp_release
postbuild_InstancingApp_release: mainbuild_InstancingApp_release
mainbuild_InstancingApp_release: prebuild_InstancingApp_release $(InstancingApp_release_bin)
prebuild_InstancingApp_release:

-include $(InstancingApp_release_cpp_o:%o=%d)

$(InstancingApp_release_bin): $(InstancingApp_release_obj) $(Half_release_bin) $(NvAppBase_release_bin) $(NvAssetLoader_release_bin) $(NvGamepad_release_bin) $(NvGLUtils_release_bin) $(NvModel_release_bin) $(NvUI_release_bin) 
	@mkdir -p `dirname ./../../bin/linux-arm32/InstancingApp`
	$(CCLD) $^ $(InstancingApp_release_lflags) -o $(InstancingApp_release_bin) 
	@$(ECHO) building $@ complete!

$(InstancingApp_release_cpp_o): $(InstancingApp_release_objsdir)/%.o: 
	@$(ECHO) InstancingApp: compiling release $(filter %$*,$(InstancingApp_cppfiles))...
	@mkdir -p $(dir $(@))
	$(CXX) $(InstancingApp_release_cflags) -MMD -MP -MF $(subst .cpp.o,.cpp.d,$@) -c $(filter %$*,$(InstancingApp_cppfiles)) -o $@
