# Makefile generated by XPJ for linux-arm32
-include Makefile.custom
ProjectName = NvAppBase
NvAppBase_cppfiles   += ./../../src/NvAppBase/EngineAndroid.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/InputCallbacksGLFW.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/MainAndroid.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/MainLinux.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/MainMacOSX.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/MainWin32.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/NvAppBase.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/NvFramerateCounter.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/NvInputTransformer.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/NvLogs.cpp
NvAppBase_cppfiles   += ./../../src/NvAppBase/NvSampleApp.cpp
NvAppBase_cfiles   += ./../../src/NvAppBase/NvAndroidNativeAppGlue.c

NvAppBase_debug_hpaths    := 
NvAppBase_debug_hpaths    += ./../../src/NvAppBase
NvAppBase_debug_hpaths    += ./../../include
NvAppBase_debug_hpaths    += ./../../externals/include
NvAppBase_debug_hpaths    += ./../../externals/include/GLFW
NvAppBase_debug_lpaths    := 
NvAppBase_debug_defines   := $(NvAppBase_custom_defines)
NvAppBase_debug_defines   += LINUX=1
NvAppBase_debug_defines   += _LIB
NvAppBase_debug_defines   += GLEW_NO_GLU=1
NvAppBase_debug_defines   += _DEBUG
NvAppBase_debug_libraries := 
NvAppBase_debug_libraries += pthread
NvAppBase_debug_libraries += glfw3
NvAppBase_debug_cflags    := $(NvAppBase_custom_cflags)
NvAppBase_debug_cflags    += $(addprefix -D, $(NvAppBase_debug_defines))
NvAppBase_debug_cflags    += $(addprefix -I, $(NvAppBase_debug_hpaths))
NvAppBase_debug_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function
NvAppBase_debug_cflags  += -Wno-reorder
NvAppBase_debug_cflags  += -funwind-tables -O0 -g -ggdb -fno-omit-frame-pointer
NvAppBase_debug_lflags    := $(NvAppBase_custom_lflags)
NvAppBase_debug_lflags    += $(addprefix -L, $(NvAppBase_debug_lpaths))
NvAppBase_debug_lflags    += -Wl,--start-group $(addprefix -l, $(NvAppBase_debug_libraries)) -Wl,--end-group
NvAppBase_debug_objsdir  := $(OBJS_DIR)/NvAppBase_debug
NvAppBase_debug_obj      := 
NvAppBase_debug_cpp_o    = $(addprefix $(NvAppBase_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(NvAppBase_cppfiles)))))
NvAppBase_debug_obj      += $(NvAppBase_debug_cpp_o) 
NvAppBase_debug_c_o    = $(addprefix $(NvAppBase_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(NvAppBase_cfiles)))))
NvAppBase_debug_obj      += $(NvAppBase_debug_c_o) 
NvAppBase_debug_bin      := ./../../lib/linux-arm32/libNvAppBaseD.a

clean_NvAppBase_debug: 
	@$(ECHO) clean NvAppBase debug
	@$(RMDIR) $(NvAppBase_debug_objsdir)
	@$(RMDIR) $(NvAppBase_debug_bin)

build_NvAppBase_debug: postbuild_NvAppBase_debug
postbuild_NvAppBase_debug: mainbuild_NvAppBase_debug
mainbuild_NvAppBase_debug: prebuild_NvAppBase_debug $(NvAppBase_debug_bin)
prebuild_NvAppBase_debug:

-include $(NvAppBase_debug_cpp_o:%o=%d)
-include $(NvAppBase_debug_c_o:%o=%d)

$(NvAppBase_debug_bin): $(NvAppBase_debug_obj) 
	@mkdir -p `dirname ./../../lib/linux-arm32/libNvAppBaseD.a`
	@$(AR) r $(NvAppBase_debug_bin) $^
	@$(RANLIB) $(NvAppBase_debug_bin)
	@$(ECHO) building $@ complete!

$(NvAppBase_debug_cpp_o): $(NvAppBase_debug_objsdir)/%.o: 
	@$(ECHO) NvAppBase: compiling debug $(filter %$*,$(NvAppBase_cppfiles))...
	@mkdir -p $(dir $(@))
	$(CXX) $(NvAppBase_debug_cflags) -MMD -MP -MF $(subst .cpp.o,.cpp.d,$@) -c $(filter %$*,$(NvAppBase_cppfiles)) -o $@
$(NvAppBase_debug_c_o): $(NvAppBase_debug_objsdir)/%.o: 
	@$(ECHO) NvAppBase: compiling debug $(filter %$*,$(NvAppBase_cfiles))...
	@mkdir -p $(dir $(@))
	$(CC) $(NvAppBase_debug_cflags) -MMD -MP -MF $(subst .c.o,.c.d,$@) -c $(filter %$*,$(NvAppBase_cfiles)) -o $@
NvAppBase_release_hpaths    := 
NvAppBase_release_hpaths    += ./../../src/NvAppBase
NvAppBase_release_hpaths    += ./../../include
NvAppBase_release_hpaths    += ./../../externals/include
NvAppBase_release_hpaths    += ./../../externals/include/GLFW
NvAppBase_release_lpaths    := 
NvAppBase_release_defines   := $(NvAppBase_custom_defines)
NvAppBase_release_defines   += LINUX=1
NvAppBase_release_defines   += _LIB
NvAppBase_release_defines   += GLEW_NO_GLU=1
NvAppBase_release_defines   += NDEBUG
NvAppBase_release_libraries := 
NvAppBase_release_libraries += pthread
NvAppBase_release_libraries += glfw3
NvAppBase_release_cflags    := $(NvAppBase_custom_cflags)
NvAppBase_release_cflags    += $(addprefix -D, $(NvAppBase_release_defines))
NvAppBase_release_cflags    += $(addprefix -I, $(NvAppBase_release_hpaths))
NvAppBase_release_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function
NvAppBase_release_cflags  += -Wno-reorder
NvAppBase_release_cflags  += -funwind-tables -O2 -fno-omit-frame-pointer
NvAppBase_release_lflags    := $(NvAppBase_custom_lflags)
NvAppBase_release_lflags    += $(addprefix -L, $(NvAppBase_release_lpaths))
NvAppBase_release_lflags    += -Wl,--start-group $(addprefix -l, $(NvAppBase_release_libraries)) -Wl,--end-group
NvAppBase_release_objsdir  := $(OBJS_DIR)/NvAppBase_release
NvAppBase_release_obj      := 
NvAppBase_release_cpp_o    = $(addprefix $(NvAppBase_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(NvAppBase_cppfiles)))))
NvAppBase_release_obj      += $(NvAppBase_release_cpp_o) 
NvAppBase_release_c_o    = $(addprefix $(NvAppBase_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(NvAppBase_cfiles)))))
NvAppBase_release_obj      += $(NvAppBase_release_c_o) 
NvAppBase_release_bin      := ./../../lib/linux-arm32/libNvAppBase.a

clean_NvAppBase_release: 
	@$(ECHO) clean NvAppBase release
	@$(RMDIR) $(NvAppBase_release_objsdir)
	@$(RMDIR) $(NvAppBase_release_bin)

build_NvAppBase_release: postbuild_NvAppBase_release
postbuild_NvAppBase_release: mainbuild_NvAppBase_release
mainbuild_NvAppBase_release: prebuild_NvAppBase_release $(NvAppBase_release_bin)
prebuild_NvAppBase_release:

-include $(NvAppBase_release_cpp_o:%o=%d)
-include $(NvAppBase_release_c_o:%o=%d)

$(NvAppBase_release_bin): $(NvAppBase_release_obj) 
	@mkdir -p `dirname ./../../lib/linux-arm32/libNvAppBase.a`
	@$(AR) r $(NvAppBase_release_bin) $^
	@$(RANLIB) $(NvAppBase_release_bin)
	@$(ECHO) building $@ complete!

$(NvAppBase_release_cpp_o): $(NvAppBase_release_objsdir)/%.o: 
	@$(ECHO) NvAppBase: compiling release $(filter %$*,$(NvAppBase_cppfiles))...
	@mkdir -p $(dir $(@))
	$(CXX) $(NvAppBase_release_cflags) -MMD -MP -MF $(subst .cpp.o,.cpp.d,$@) -c $(filter %$*,$(NvAppBase_cppfiles)) -o $@
$(NvAppBase_release_c_o): $(NvAppBase_release_objsdir)/%.o: 
	@$(ECHO) NvAppBase: compiling release $(filter %$*,$(NvAppBase_cfiles))...
	@mkdir -p $(dir $(@))
	$(CC) $(NvAppBase_release_cflags) -MMD -MP -MF $(subst .c.o,.c.d,$@) -c $(filter %$*,$(NvAppBase_cfiles)) -o $@
